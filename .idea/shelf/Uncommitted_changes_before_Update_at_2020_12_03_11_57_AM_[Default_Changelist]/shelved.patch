Index: app/src/main/java/com/example/project/ManagerModify.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.project;\n\nimport androidx.appcompat.app.ActionBar;\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.appcompat.widget.Toolbar;\nimport androidx.recyclerview.widget.LinearLayoutManager;\nimport androidx.recyclerview.widget.RecyclerView;\n\nimport android.content.Intent;\nimport android.graphics.Color;\nimport android.graphics.drawable.ColorDrawable;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.View;\nimport android.view.Window;\nimport android.view.WindowManager;\nimport android.widget.ImageButton;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport java.util.ArrayList;\n\npublic class ManagerModify extends AppCompatActivity {\n\n    /*Tool Bar 관련 컴포넌트*/\n    private Toolbar toolbar;\n    private ActionBar actionBar;\n    private TextView TitleTextView;\n    private ImageButton editButton;\n\n    /*Dialog 관련 컴포넌트*/\n    ImageButton addPlaceButton;\n    private DialogOfPlace dialog;\n\n    /*RecyclerView 관련 컴포넌트*/\n    private RecyclerView patientRecyclerView;\n    private LinearLayoutManager layoutManager;\n    private ArrayList<VisitPlace> visitPlaceArrayList;\n    private AdapterOfPlace adapter;\n\n    /*데이터 관련 컴포넌트*/\n    private TextView patientNumEditText, patientDateEditText;\n    private TextView bigLocTextView, smallLocTextView;\n    int pBigLocal, pSmallLocal;\n    private TextView titleTextView;\n    private ArrayList<VisitPlace> deletePlaceArrayList, addPlaceArrayList;\n    Patient data;   // DBEntity.patient_info()에서 선택된 확진자 객체\n    int rowNum;      // PageOfList에서 선택된 확진자 번호\n\n    enum MODE {DEF, EDIT};\n    MODE now = MODE.DEF;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_manager_modify);\n\n        now = MODE.DEF;\n\n        /*Tool Bar 연결*/\n        toolbar = findViewById(R.id.manager_modify_Toolbar);\n        setSupportActionBar(toolbar);\n        actionBar = getSupportActionBar();\n        actionBar.setDisplayShowCustomEnabled(true);\n        actionBar.setDisplayShowTitleEnabled(false);\n\n        TitleTextView = findViewById(R.id.manager_modify_Title_TextView);\n        TitleTextView.setText(\"확진자 정보\");\n\n        editButton = findViewById(R.id.manager_modify_save_ImageButton);\n        setMode();\n        //--------------------------------------------------------------------------------------\n        /* 확진자 데이터 전체 삭제 */\n\n        //--------------------------------------------------------------------------------------\n        titleTextView = findViewById(R.id.modify_next_to_button_TextView);\n        titleTextView.setText(\"확진자 정보\");\n        patientNumEditText = findViewById(R.id.modify_num_EditText);\n        patientDateEditText = findViewById(R.id.modify_time_EditText);\n        bigLocTextView = findViewById(R.id.modify_big_TextView);\n        smallLocTextView = findViewById(R.id.modify_small_TextView);\n\n        Intent intent = getIntent();\n        data = (Patient) intent.getSerializableExtra(\"row\");\n        rowNum = intent.getIntExtra(\"rowNum\", 100);\n\n        patientDateEditText.setText(data.getConfirmDate());\n        patientNumEditText.setText(data.getPatientNum());\n        pBigLocal = data.getBigLocalNum();\n        pSmallLocal = data.getSmallLocalNum();\n\n        String[] bigArray = getResources().getStringArray(R.array.big_location_array);\n        bigLocTextView.setText(bigArray[pBigLocal]);\n        String index = Integer.toString(pBigLocal);\n        int resId = getResources().getIdentifier(\"array_\"+index, \"array\", getPackageName());\n        String[] smallArray = getResources().getStringArray(resId);\n        smallLocTextView.setText(smallArray[pSmallLocal]);\n\n        //--------------------------------------------------------------------------------------\n        /*RecyclerView 연결*/\n        patientRecyclerView = findViewById(R.id.modify_visit_RecyclerView);\n        layoutManager = new LinearLayoutManager(this);\n        patientRecyclerView.setLayoutManager(layoutManager);\n        patientRecyclerView.setHasFixedSize(true);\n\n        visitPlaceArrayList = data.getVisitPlaceList();\n        adapter = new AdapterOfPlace(visitPlaceArrayList, 0);\n        patientRecyclerView.setAdapter(adapter);\n\n        deletePlaceArrayList = new ArrayList<VisitPlace>(); // DB에서 지울 동선 리스트\n        addPlaceArrayList = new ArrayList<VisitPlace>();    // DB에 올릴 동선 리스트\n        //--------------------------------------------------------------------------------------\n        /*다이얼로그 연결*/\n        addPlaceButton = findViewById(R.id.modify_visit_add_Button);\n        addPlaceButton.setVisibility(View.INVISIBLE);\n        addPlaceButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                dialog = new DialogOfPlace(ManagerModify.this);\n                dialog.setVisitDialogListener(new DialogOfPlace.VisitDialogListener() {\n                    @Override\n                    public void onAddClicked(VisitPlace visitPlace) {\n                        visitPlaceArrayList.add(visitPlace);\n                        addPlaceArrayList.add(visitPlace);\n                        adapter.notifyDataSetChanged();\n                    }\n                });\n                dialog.setCancelable(true);\n                dialog.setCanceledOnTouchOutside(false);\n                dialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));\n                dialog.show();\n                WindowManager.LayoutParams lp = new WindowManager.LayoutParams();\n                lp.copyFrom(dialog.getWindow().getAttributes());\n                lp.width = WindowManager.LayoutParams.MATCH_PARENT;\n                lp.height = WindowManager.LayoutParams.WRAP_CONTENT;\n                Window window = dialog.getWindow();\n                window.setAttributes(lp);\n            }\n        });\n    }\n\n    private void setMode(){\n        editButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                if(now == MODE.DEF){\n                    now = MODE.EDIT;\n                    setEditMode();\n                    Toast.makeText(getApplicationContext(), \"확진자 동선 수정 모드입니다.\", Toast.LENGTH_SHORT).show();\n                }else{\n                    now = MODE.DEF;\n                    saveEditData();\n                    setDefMode();\n                    Toast.makeText(getApplicationContext(), \"변경 사항을 저장했습니다.\", Toast.LENGTH_SHORT).show();\n\n                }\n            }\n        });\n    }\n\n    private void setEditMode(){\n        Toast.makeText(this, \"편집 모드로 전환합니다.\", Toast.LENGTH_SHORT).show();\n        editButton.setImageResource(R.drawable.save);\n        addPlaceButton.setVisibility(View.VISIBLE);\n        titleTextView.setText(\"수정할 확진자\");\n        adapter = new AdapterOfPlace(visitPlaceArrayList, 1);\n        patientRecyclerView.setAdapter(adapter);\n        adapter.setModifyClickListenter(new AdapterOfPlace.OnModifyClickListener(){\n            @Override\n            public void onModifyItemClick(View v, int pos) {\n                // 삭제할 데이터를 deletePlaceArrayList에 저장\n                deletePlaceArrayList.add(visitPlaceArrayList.get(pos));\n                visitPlaceArrayList.remove(pos);\n                Log.d(\"삭제될 데이터 위치\", Integer.toString(pos));\n                Log.d(\"삭제 후에 실제 데이터 크기 : \", Integer.toString(visitPlaceArrayList.size()));\n            }\n        });\n    }\n\n    private void setDefMode(){\n        editButton.setImageResource(R.drawable.ic_baseline_edit_24);\n        addPlaceButton.setVisibility(View.INVISIBLE);\n        titleTextView.setText(\"확진자 정보\");\n        adapter = new AdapterOfPlace(visitPlaceArrayList, 0);\n        patientRecyclerView.setAdapter(adapter);\n    }\n\n    private void saveEditData(){\n        // 이곳에서 변경된 데이터를 업데이트 함\n        // DBEntity 클래스의 pmoving_delete 함수, insert 함수\n        for(int i=0; i<deletePlaceArrayList.size();i++){\n            VisitPlace vp = deletePlaceArrayList.get(i);\n            int result1 = DBEntity.AND_delete_pmoving(data, vp);\n            Log.d(\"확진자 방문지 삭제리스트 삭제 완료 : \", Integer.toString(result1));\n        }\n        for(int i=0; i<addPlaceArrayList.size(); i++){\n            VisitPlace vp = addPlaceArrayList.get(i);\n            int result2 = DBEntity.AND_insert_pmoving(data, vp);\n            Log.d(\"확진자 방문지 추가리스트 추가 완료 : \", Integer.toString(result2));\n        }\n        Toast.makeText(this, \"변경 사항이 저장되었습니다.\", Toast.LENGTH_SHORT).show();\n    }\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/project/ManagerModify.java	(revision 913aced32c34f88249939901266d986e0c3b69f6)
+++ app/src/main/java/com/example/project/ManagerModify.java	(date 1606942686000)
@@ -149,7 +149,11 @@
                     Toast.makeText(getApplicationContext(), "확진자 동선 수정 모드입니다.", Toast.LENGTH_SHORT).show();
                 }else{
                     now = MODE.DEF;
-                    saveEditData();
+                    try {
+                        saveEditData();
+                    } catch (InterruptedException e) {
+                        e.printStackTrace();
+                    }
                     setDefMode();
                     Toast.makeText(getApplicationContext(), "변경 사항을 저장했습니다.", Toast.LENGTH_SHORT).show();
 
@@ -185,18 +189,28 @@
         patientRecyclerView.setAdapter(adapter);
     }
 
-    private void saveEditData(){
+    private void saveEditData() throws InterruptedException {
         // 이곳에서 변경된 데이터를 업데이트 함
         // DBEntity 클래스의 pmoving_delete 함수, insert 함수
         for(int i=0; i<deletePlaceArrayList.size();i++){
             VisitPlace vp = deletePlaceArrayList.get(i);
-            int result1 = DBEntity.AND_delete_pmoving(data, vp);
-            Log.d("확진자 방문지 삭제리스트 삭제 완료 : ", Integer.toString(result1));
+            int result1 = DBEntity.delete_pmoving(data, vp);
+            if(result1==1) {
+                DBEntity.AND_delete_pmoving(data, vp);
+                Log.d("확진자 방문지 삭제리스트 삭제 완료 : ", Integer.toString(result1));
+                Toast.makeText(this, "확진자 방문지 삭제리스트 삭제 완료", Toast.LENGTH_SHORT).show();
+            }else Toast.makeText(this, "확진자 방문지 삭제 실패", Toast.LENGTH_SHORT).show();
+
         }
         for(int i=0; i<addPlaceArrayList.size(); i++){
             VisitPlace vp = addPlaceArrayList.get(i);
-            int result2 = DBEntity.AND_insert_pmoving(data, vp);
-            Log.d("확진자 방문지 추가리스트 추가 완료 : ", Integer.toString(result2));
+            int result2 = DBEntity.insert_pmoving(data, vp);
+            if(result2==1) {
+                DBEntity.AND_insert_pmoving(data, vp);
+                Log.d("확진자 방문지 추가리스트 추가 완료 : ", Integer.toString(result2));
+                Toast.makeText(this, "확진자 방문지 추가리스트 추가 완료", Toast.LENGTH_SHORT).show();
+            }else Toast.makeText(this, "확진자 방문지 추가 실패", Toast.LENGTH_SHORT).show();
+
         }
         Toast.makeText(this, "변경 사항이 저장되었습니다.", Toast.LENGTH_SHORT).show();
     }
Index: app/src/main/java/com/example/project/PageOfList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.project;\n\nimport android.app.AlertDialog;\nimport android.content.DialogInterface;\nimport android.content.Intent;\n\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.AdapterView;\nimport android.widget.ArrayAdapter;\nimport android.widget.Spinner;\nimport android.widget.Toast;\n\nimport androidx.annotation.NonNull;\nimport androidx.annotation.Nullable;\nimport androidx.fragment.app.Fragment;\nimport androidx.recyclerview.widget.LinearLayoutManager;\nimport androidx.recyclerview.widget.RecyclerView;\n\nimport org.json.JSONException;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\n\npublic class PageOfList extends Fragment {\n\n    /*Spinner 관련 컴포넌트*/\n    private Spinner bigLocSpinner, smallLocSpinner;\n    private ArrayAdapter bigAdapter, smallAdapter;\n\n    /*RecyclerView 관련 컴포넌트*/\n    private RecyclerView patientRecyclerView;\n    private LinearLayoutManager layoutManager;\n    private ArrayList<Patient> patientArrayList, totalArrayList;\n    private AdapterOfList adapter;\n\n    /*데이터 저장 변수*/\n    int pBigLocal, pSmallLocal;\n    Patient selectedRow, deletePatient;\n    int testPos;\n\n    @Override\n    public void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        if(totalArrayList == null){\n            try {\n                totalArrayList = DBEntity.patient_info();\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n            Log.d(\"리스트 페이지에 Total Array : \", \"NULL\");\n        }\n        Log.d(\"onCreate\", \"1\");\n    }\n\n    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState){\n        View v = inflater.inflate(R.layout.fragment_manager_list, container, false);\n        Log.d(\"onCreateView\", \"2\");\n        pBigLocal=0;\n        pSmallLocal=0;\n        /*Spinner 연결*/\n        bigLocSpinner = v.findViewById(R.id.list_big_Spinner);\n        smallLocSpinner = v.findViewById(R.id.list_small_Spinner);\n\n        bigAdapter = ArrayAdapter.createFromResource(getContext(), R.array.big_location_array, android.R.layout.simple_spinner_dropdown_item);\n        bigAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\n        bigLocSpinner.setAdapter(bigAdapter);\n\n        smallAdapter = ArrayAdapter.createFromResource(getContext(), R.array.array_0, android.R.layout.simple_spinner_dropdown_item);\n        smallAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\n        smallLocSpinner.setAdapter(smallAdapter);\n\n        BigSpinnerAction();\n        SmallSpinnerAction();\n        //--------------------------------------------------------------------------------------\n        /*RecyclerView 연결*/\n\n        patientArrayList = new ArrayList<Patient>();\n\n        patientRecyclerView = v.findViewById(R.id.list_RecyclerView);\n        layoutManager = new LinearLayoutManager(getActivity());\n        patientRecyclerView.setLayoutManager(layoutManager);\n        patientRecyclerView.setHasFixedSize(true);\n\n        adapter = new AdapterOfList(patientArrayList);\n        patientRecyclerView.setAdapter(adapter);\n        adapter.notifyDataSetChanged();\n        adapter.setOnListClickListenter(new AdapterOfList.OnListClickListener() {\n            @Override\n            public void onListItemClick(View v, int pos) {\n                selectedRow = patientArrayList.get(pos);\n                testPos = pos;\n                Intent intent = new Intent(getActivity(), ManagerModify.class);\n                intent.putExtra(\"row\", (Serializable) selectedRow);\n                startActivity(intent);\n            }\n        });\n\n        //--------------------------------------------------------------------------------------\n        /* ManagerModify에서 전체삭제 버튼을 눌렀을 때, 해당 ROW 삭제*/\n        // DBEntity_patient_delete\n        adapter.setOnDeleteClickListener(new AdapterOfList.onDeleteClickListener() {\n            @Override\n            public void onDeleteClick(View v, int pos) {\n                TotalDeleteButtonAction(pos);\n                //DBEntity에서도 삭제\n            }\n        });\n\n\n        return v;\n    }\n\n\n    private void BigSpinnerAction(){\n        bigLocSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\n            @Override\n            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {\n                String index = Integer.toString(i);\n                int resId = getResources().getIdentifier(\"array_\"+index, \"array\", getContext().getPackageName());\n                smallAdapter = ArrayAdapter.createFromResource(getContext(), resId, android.R.layout.simple_spinner_dropdown_item);\n                pBigLocal = i;\n                patientArrayList.clear();\n                showList(pBigLocal, 0);\n                Log.d(\"큰 도시 선택 : \", Integer.toString(i));\n                smallAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\n                smallLocSpinner.setAdapter(smallAdapter);\n            }\n\n            @Override\n            public void onNothingSelected(AdapterView<?> adapterView) {\n                pBigLocal = 0;\n            }\n        });\n    }\n    private void SmallSpinnerAction(){\n        smallLocSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\n            @Override\n            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {\n                pSmallLocal = i;\n                Log.d(\"작은 도시 선택 : \", Integer.toString(i));\n                if(pBigLocal>7){\n                    patientArrayList.clear();\n                    showList(pBigLocal, pSmallLocal);\n                }\n            }\n            @Override\n            public void onNothingSelected(AdapterView<?> adapterView) {\n                patientArrayList.clear();\n                showList(pBigLocal, 0);\n            }\n        });\n    }\n\n    private void showList(int bigLoc, int smallLoc){\n        for(int i = 0;i<totalArrayList.size();i++){\n            Patient row =  totalArrayList.get(i);\n            if(row.getBigLocalNum() == pBigLocal && row.getSmallLocalNum() == pSmallLocal){\n                Log.d(\"pBigLocal\", Integer.toString(pBigLocal));\n                patientArrayList.add(row);\n            }\n            else{\n                Log.d(\"List Recyclerview : \", \"현재 데이터가 없습니다.\");\n            }\n        }\n    }\n\n    private void TotalDeleteButtonAction(final int pos){\n        AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(getContext());\n        alertDialogBuilder.setMessage(\"현재 확진자의 정보를 모두 삭제하시겠습니까?\")\n                .setCancelable(false)\n                .setPositiveButton(\"삭제\",\n                        new DialogInterface.OnClickListener() {\n                            @Override\n                            public void onClick(DialogInterface dialogInterface, int i) {\n                                //delete data\n                                Patient removePatient = patientArrayList.get(pos);\n                                patientArrayList.remove(removePatient);\n                                totalArrayList.remove(removePatient);\n                                adapter.notifyDataSetChanged();\n\n                                DBEntity.AND_delete_patient(removePatient);\n                                Log.d(\"삭제되었나?\", Integer.toString(DBEntity.ListSize()));\n                                Toast.makeText(getContext(), \"현재 확진자 정보를 삭제합니다\", Toast.LENGTH_SHORT).show();\n                            }\n                        })\n                .setNegativeButton(\"취소\",\n                        new DialogInterface.OnClickListener() {\n                            @Override\n                            public void onClick(DialogInterface dialogInterface, int i) {\n                                dialogInterface.cancel();\n                            }\n                        });\n        AlertDialog alertDialog = alertDialogBuilder.create();\n        alertDialog.show();\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/project/PageOfList.java	(revision 913aced32c34f88249939901266d986e0c3b69f6)
+++ app/src/main/java/com/example/project/PageOfList.java	(date 1606941615000)
@@ -178,13 +178,19 @@
                             public void onClick(DialogInterface dialogInterface, int i) {
                                 //delete data
                                 Patient removePatient = patientArrayList.get(pos);
-                                patientArrayList.remove(removePatient);
-                                totalArrayList.remove(removePatient);
-                                adapter.notifyDataSetChanged();
-
-                                DBEntity.AND_delete_patient(removePatient);
-                                Log.d("삭제되었나?", Integer.toString(DBEntity.ListSize()));
-                                Toast.makeText(getContext(), "현재 확진자 정보를 삭제합니다", Toast.LENGTH_SHORT).show();
+                                try {
+                                    int check=DBEntity.delete_patient(removePatient);
+                                    if(check==1) {
+                                        DBEntity.AND_delete_patient(removePatient);
+                                        Toast.makeText(getContext(), "현재 확진자 정보를 삭제합니다", Toast.LENGTH_SHORT).show();
+
+                                        patientArrayList.remove(removePatient);
+                                        totalArrayList.remove(removePatient);
+                                        adapter.notifyDataSetChanged();
+                                    } else{ Toast.makeText(getContext(), "삭제 실패! 삭제하고자 하는 확진자의 모든 동선을 미리 삭제해 주십시오.", Toast.LENGTH_SHORT).show();}
+                                } catch (InterruptedException e) {
+                                    e.printStackTrace();
+                                }
                             }
                         })
                 .setNegativeButton("취소",
Index: app/src/main/java/com/example/project/DBEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.project;\n\nimport android.util.Log;\n\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.concurrent.CountDownLatch;\n\nimport okhttp3.Call;\nimport okhttp3.Callback;\nimport okhttp3.FormBody;\nimport okhttp3.MediaType;\nimport okhttp3.OkHttpClient;\nimport okhttp3.Request;\nimport okhttp3.RequestBody;\nimport okhttp3.Response;\n\npublic class DBEntity {\n\n    /*DBEntity에서 계속 저장할 환자 리스트*/\n    private static ArrayList<Patient> patientList=new ArrayList<Patient>();\n\n    /*DB 연동시 필요한 필드들*/\n\n    private static String result=\"imsi\";//일단 임시 success\n\n\n    private static OkHttpClient client=new OkHttpClient().newBuilder().build();\n    private static String OkhttpUrl=\"http://3.35.210.3:8080/WLP_re/androidDB.jsp\";\n    private static MediaType mediaType=MediaType.parse(\"text/plain\");\n\n    private static JSONArray patients=null;\n    private static JSONArray movingList=null;\n\n\n    //patientList 값 접-----------------------------------------------------------------------------------------------\n\n    public DBEntity() {\n\n    }\n\n    public void setPatientList(ArrayList<Patient> patientList) {\n        this.patientList = patientList;\n    }\n\n    public static ArrayList<Patient> getPatientList() {\n        return patientList;\n    }\n\n    public static int ListSize(){\n        return patientList.size();\n    }\n\n\n\n    // DB테이블 수정 메소드---------------------------------------------------------------------------------------------------\n\n    public static void connectAppDB(){\n        RequestBody body =new FormBody.Builder().add(\"type\",\"patients_info\").build();\n        Request request = new Request.Builder().url(OkhttpUrl).method(\"POST\", body).build();\n\n        client.newCall(request).enqueue(new Callback() {\n            @Override\n            public void onFailure(Call call, IOException e) {\n                Log.d(\"연결 실패\", \"error Connect Server error is\"+e.toString());\n                e.printStackTrace();\n            }\n\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n                if (response.isSuccessful()) {\n                    try {\n                        patients = new JSONArray(response.body().string());\n                    } catch (JSONException e) {\n                        e.printStackTrace();\n                    }\n                    Log.d(\"patient json array\",patients.toString());\n                }\n            }\n        });\n    }\n\n    public static void connectMovingDB(){\n\n        RequestBody body =new FormBody.Builder().add(\"type\",\"pmoving_info\").build();\n        Request request = new Request.Builder().url(OkhttpUrl).method(\"POST\", body).build();\n\n        client.newCall(request).enqueue(new Callback() {\n            @Override\n            public void onFailure(Call call, IOException e) {\n                Log.d(\"연결 실패\", \"error Connect Server error is\"+e.toString());\n                e.printStackTrace();\n            }\n\n            @Override\n            public void onResponse(Call call, Response response) throws IOException {\n                if (response.isSuccessful()) {\n                    try {\n                        movingList = new JSONArray(response.body().string());\n                    } catch (JSONException e) {\n                        e.printStackTrace();\n                    }\n                    Log.d(\"pmoving json array\",movingList.toString());\n                }\n            }\n        });\n    }\n\n    /*인트로 때, 앱 실행시 한 번만 불리는 메소드드*/\n    public static ArrayList<Patient> patient_info() throws JSONException {\n        ArrayList<VisitPlace> temp = new ArrayList<VisitPlace>();\n\n        for(int i =0; i < patients.length();i++){\n            JSONObject patient = patients.getJSONObject(i);\n            temp = new  ArrayList<VisitPlace>();\n            String plocnum = patient.getString(\"plocnum\");\n            String checkNum = plocnum+patient.getString(\"pnum\");\n            int small=Integer.parseInt(plocnum.substring(2));\n            int big=Integer.parseInt(plocnum.substring(0,2));\n\n\n            for(int j =0; j < movingList.length();j++){\n                JSONObject moving = movingList.getJSONObject(j);\n                String movingCheckNum = moving.getString(\"plocnum\")+moving.getString(\"pnum\");\n                if(checkNum.equals(movingCheckNum)){\n                    temp.add(new VisitPlace(new Place(moving.getString(\"address\"),\n                            moving.getDouble(\"pointx\"),moving.getDouble(\"pointy\")),moving.getString(\"visitdate\")));\n                }\n            }\n            patientList.add(new Patient(small,big,patient.getString(\"pnum\")\n                    ,patient.getString(\"confirmdate\"),temp));\n        }\n        return patientList;\n    }\n\n    /*로그인 메소드드*/\n    public static int login(String managerID, String managerPW) throws InterruptedException {\n            RequestBody body = new FormBody.Builder().add(\"id\", managerID).add(\"pw\", managerPW).add(\"type\", \"login\").build();\n            Request request = new Request.Builder().url(OkhttpUrl).method(\"POST\", body).build();\n\n            final CountDownLatch countDownLatch = new CountDownLatch(1);\n            client.newCall(request).enqueue(new Callback() {\n                @Override\n                public void onFailure(Call call, IOException e) {\n                    Log.d(\"연결 실패\", \"error Connect Server error is\"+e.toString());\n                    e.printStackTrace();\n                    countDownLatch.countDown();\n                }\n\n                @Override\n                public void onResponse(Call call, Response response) throws IOException {\n                   // if (response.isSuccessful()) {\n                        result =response.body().string();\n                        Boolean b = result.equals(\"success\");\n                        Log.d(\"진짜 같냐? \", b.toString());\n                        Log.d(\"젼쥬\", result);\n                        countDownLatch.countDown();\n                  //  }\n                }\n            });\n\n            countDownLatch.await();\n        Log.d(\"젼쥬22\", result);\n            if(result.equals(\"\\n\\n\\n\\n\\nsuccess\")) return 1;\n            else if(result.equals(\"\\n\\n\\n\\n\\nfailed\")) return 0;\n            else if(result.equals(\"\\n\\n\\n\\n\\nnoID\")) return 2;\n            else return -1;\n\n    }\n\n        /*환자번호와 지역번호로 중복되는 환자가 있는지 확인하는 메소드*/\n        public static int DBcheck_patient(int LocalNumber, String patientNum) {\n            RequestBody body =new FormBody.Builder().add(\"type\",\"patients_info\").build();\n            Request request = new Request.Builder().url(OkhttpUrl).method(\"POST\", body).build();\n\n\n            if (result.equals(\"success\")) return 1;\n            else return 0;\n        }\n\n        /*관리자의 확진자 추가 페이지에서 확진자 정보를 추가하는 메소-동선 제외 */\n        public static int insert_patient(Patient patient) {\n            if (result.equals(\"success\")) return 1;\n            else return 0;\n        }\n\n        /*관리자의 확진자 추가 페이지에서 확진자 동선 정보 하나를 추가하는 메소드-무조건 해당 환자에 한 정보가 테이블에 저장되어 있어야 함. */\n        public static int insert_pmoving(Patient patient, VisitPlace visitplace) {\n            if (result.equals(\"success\")) return 1;\n            else return 0;\n        }\n\n        /*관리자의 확진자 수정 페이지에서 확진자 동선 정보 하나를 삭제하는 메소드 */\n        public static int delete_pmoving(Patient patient, VisitPlace visitplace) {\n            if (result.equals(\"success\")) return 1;\n            else return 0;\n        }\n\n        /*관리자의 확진자 추가, 수정 페이지에서 확진자 동선 정보 하나를 삭제하는 메소드-환자 정보를 삭제하면 관련 동선 정보도 싹다 삭제*/\n        public static int delete_patient(Patient patient) {\n            if (result.equals(\"success\")) return 1;\n            else return 0;\n        }\n\n\n\n    //Android 프로젝트에 저장되어 있는 patientlist 수정 메소드: DB 메소드 성공----------------------------------------------------------------------------------------------------\n\n    /*관리자의 확진자 추가 페이지에서 확진자 정보를 추가하는 메소-동선 제외 */\n    public void AND_insert_patient(Patient patient) {\n        patientList.add(patient);\n    }\n\n    /*관리자의 확진자 추가 페이지에서 확진자 동선 정보 하나를 추가하는 메소드-무조건 해당 환자에 한 정보가 테이블에 저장되어 있어야 함. */\n    public static int AND_insert_pmoving(Patient patient, VisitPlace visitplace) {\n        for (int i = 0; i < patientList.size(); i++) {\n            Log.d(\"AND 환자 : \", patient.getPatientNum()+\", \"+Integer.toString(patient.getSmallLocalNum())+\", \"+Integer.toString(patient.getBigLocalNum()));\n            if (patient.getSmallLocalNum() == patientList.get(i).getSmallLocalNum() && patient.getBigLocalNum() == patientList.get(i).getBigLocalNum()\n                    && patient.getPatientNum().equals(patientList.get(i).getPatientNum())) {\n                //조건문 바꿔야 함! patient 테이블의 프라이머리 키는 지역번호랑 환자번호! 즉 patient와 patientList.get(i)의 정보가 같을 두객체가 같을 때——————————————————————————————————————————————————patient는 smalllocalnum,bigloculnum,patientnum 같으면 같은 객체!\n                Log.d(\"patient\",Integer.toString(patientList.get(i).getVisitPlaceList().size()));\n                patientList.get(i).getVisitPlaceList().add(visitplace);\n                Log.d(\"patient\",Integer.toString(patientList.get(i).getVisitPlaceList().size()));\n                //해당 환자에 visitplace 추가\n                return 1;// 동선 삽입 성공\n            }\n        }\n        return 0;//동선 삽입 실패: 해당 환자 정보가 없음\n    }\n\n\n    /*관리자의 확진자 수정 페이지에서 확진자 동선 정보 하나를 삭제하는 메소드 */\n    public static int AND_delete_pmoving(Patient patient, VisitPlace visitplace) {\n        //patient_info();\n        for (int i = 0; i < patientList.size(); i++) {\n            //1. 환자리스트를 돌며 동일한 환자 찾기.\n            //DB테이블에서의 primary 키값들의 값이 같을 때 동일 환자.\n            Log.d(\"AND 환자 : \", patient.getPatientNum()+\", \"+Integer.toString(patient.getSmallLocalNum())+\", \"+Integer.toString(patient.getBigLocalNum()));\n            if (patient.getSmallLocalNum() == patientList.get(i).getSmallLocalNum() && patient.getBigLocalNum() == patientList.get(i).getBigLocalNum()\n                    && patient.getPatientNum().equals(patientList.get(i).getPatientNum())){\n                //칮으면 해당 환자의 visitplacelist를 돌며 매개변수로 온 visitplace 찾고 삭제하기\n                int t = findIndex(patientList.get(i).getVisitPlaceList(),visitplace);\n                if(t!=-1){\n                    patientList.get(i).getVisitPlaceList().remove(t);\n                }\n                //setPatientList(patientList);\n                Log.d(\"patient\",Integer.toString(patientList.get(i).getVisitPlaceList().size()));\n                return 1;//정상 삭제\n            }\n        }\n        return -1;//환자 정보도 없을 경우\n    }\n    public static int findIndex(ArrayList<VisitPlace> visitplaceList,VisitPlace visitplace2){\n        for(int i =0; i <visitplaceList.size();i++){\n            if(visitplaceList.get(i).getVisitDate().equals(visitplace2.getVisitDate())&&\n                    visitplaceList.get(i).getVisitPlace().get_placeAddress().equals(visitplace2.getVisitPlace().get_placeAddress())){\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    /*관리자의 확진자 추가, 수정 페이지에서 확진자 동선 정보 하나를 삭제하는 메소드-환자 정보를 삭제하면 관련 동선 정보도 싹다 삭제*/\n    public static void AND_delete_patient(Patient patient) {\n        patientList.remove(patient);\n    }\n\n    /*환자번호와 지역번호로 중복되는 환자가 있는지 확인하는 메소드*/\n    public static int check_patient(int LocalNumber, String patientNum) {\n        if (result.equals(\"success\"))\n        {\n            for(int i =0 ;i< patientList.size();i++){\n                int check =  patientList.get(i).getBigLocalNum()*100 + patientList.get(i).getSmallLocalNum();\n                if(LocalNumber==check && patientNum.equals(patientList.get(i).getPatientNum())){\n                    return 0;\n                }\n            }\n        }\n        return 1;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/project/DBEntity.java	(revision 913aced32c34f88249939901266d986e0c3b69f6)
+++ app/src/main/java/com/example/project/DBEntity.java	(date 1606943120000)
@@ -30,7 +30,7 @@
 
 
     private static OkHttpClient client=new OkHttpClient().newBuilder().build();
-    private static String OkhttpUrl="http://3.35.210.3:8080/WLP_re/androidDB.jsp";
+    private static String OkhttpUrl="http://192.168.1.196:8080/WLP_re/androidDB.jsp";
     private static MediaType mediaType=MediaType.parse("text/plain");
 
     private static JSONArray patients=null;
@@ -39,9 +39,7 @@
 
     //patientList 값 접-----------------------------------------------------------------------------------------------
 
-    public DBEntity() {
-
-    }
+    public DBEntity() { }
 
     public void setPatientList(ArrayList<Patient> patientList) {
         this.patientList = patientList;
@@ -153,57 +151,187 @@
 
                 @Override
                 public void onResponse(Call call, Response response) throws IOException {
-                   // if (response.isSuccessful()) {
                         result =response.body().string();
-                        Boolean b = result.equals("success");
-                        Log.d("진짜 같냐? ", b.toString());
-                        Log.d("젼쥬", result);
                         countDownLatch.countDown();
-                  //  }
                 }
             });
 
             countDownLatch.await();
-        Log.d("젼쥬22", result);
             if(result.equals("\n\n\n\n\nsuccess")) return 1;
             else if(result.equals("\n\n\n\n\nfailed")) return 0;
             else if(result.equals("\n\n\n\n\nnoID")) return 2;
             else return -1;
-
     }
 
         /*환자번호와 지역번호로 중복되는 환자가 있는지 확인하는 메소드*/
-        public static int DBcheck_patient(int LocalNumber, String patientNum) {
-            RequestBody body =new FormBody.Builder().add("type","patients_info").build();
+        public static int DBcheck_patient(String plocnum, String pnum) throws InterruptedException {
+            RequestBody body = new FormBody.Builder().add("pnum", pnum).add("plocnum", plocnum).add("type", "check_patient").build();
             Request request = new Request.Builder().url(OkhttpUrl).method("POST", body).build();
 
+            final CountDownLatch countDownLatch = new CountDownLatch(1);
+            client.newCall(request).enqueue(new Callback() {
+                @Override
+                public void onFailure(Call call, IOException e) {
+                    Log.d("연결 실패", "error Connect Server error is"+e.toString());
+                    e.printStackTrace();
+                    countDownLatch.countDown();
+                }
+
+                @Override
+                public void onResponse(Call call, Response response) throws IOException {
+                    result =response.body().string();
+                    countDownLatch.countDown();
+                }
+            });
 
-            if (result.equals("success")) return 1;
-            else return 0;
+            countDownLatch.await();
+
+            if(result.equals("\n\n\n\n\nnewP")) return 1;
+            else if(result.equals("\n\n\n\n\nexist")) return 0;
+            else return -1;
         }
 
         /*관리자의 확진자 추가 페이지에서 확진자 정보를 추가하는 메소-동선 제외 */
-        public static int insert_patient(Patient patient) {
-            if (result.equals("success")) return 1;
-            else return 0;
+        public static int insert_patient(Patient patient) throws InterruptedException {
+            String pnum=patient.getPatientNum();
+            String bloc=String.format("%02d",patient.getBigLocalNum());
+            String sloc=String.format("%02d",patient.getSmallLocalNum());
+            String plocnum=bloc+sloc;
+            String confirmdate=patient.getConfirmDate();
+            RequestBody body = new FormBody.Builder().add("pnum", pnum).add("plocnum", plocnum).add("confirmdate", confirmdate).add("type", "insert_patient").build();
+            Request request = new Request.Builder().url(OkhttpUrl).method("POST", body).build();
+
+            final CountDownLatch countDownLatch = new CountDownLatch(1);
+            client.newCall(request).enqueue(new Callback() {
+                @Override
+                public void onFailure(Call call, IOException e) {
+                    Log.d("연결 실패", "error Connect Server error is"+e.toString());
+                    e.printStackTrace();
+                    countDownLatch.countDown();
+                }
+
+                @Override
+                public void onResponse(Call call, Response response) throws IOException {
+                    result =response.body().string();
+                    countDownLatch.countDown();
+                }
+            });
+
+            countDownLatch.await();
+            if(result.equals("\n\n\n\n\nsuccess")) return 1;
+            else return -1;
         }
 
         /*관리자의 확진자 추가 페이지에서 확진자 동선 정보 하나를 추가하는 메소드-무조건 해당 환자에 한 정보가 테이블에 저장되어 있어야 함. */
-        public static int insert_pmoving(Patient patient, VisitPlace visitplace) {
-            if (result.equals("success")) return 1;
-            else return 0;
+        public static int insert_pmoving(Patient patient, VisitPlace visitplace) throws InterruptedException {
+            String pnum=patient.getPatientNum();
+            String bloc=String.format("%02d",patient.getBigLocalNum());
+            String sloc=String.format("%02d",patient.getSmallLocalNum());
+            String plocnum=bloc+sloc;
+            String visitdate=visitplace.getVisitDate();
+            Double pointx=visitplace.getVisitPlace().get_placeX();
+            Double pointy=visitplace.getVisitPlace().get_placeY();
+            String address=visitplace.getVisitPlace().get_placeAddress();
+
+            //pnum, plocnum, visitdate, Double.parseDouble(pointx), Double.parseDouble(pointy), address);
+            RequestBody body = new FormBody.Builder().add("pnum", pnum).add("plocnum", plocnum).add("visitdate", visitdate).add("pointx", String.valueOf(pointx)).add("pointy", String.valueOf(pointy)).add("address", address).add("type", "insert_pmoving").build();
+            Request request = new Request.Builder().url(OkhttpUrl).method("POST", body).build();
+
+            final CountDownLatch countDownLatch = new CountDownLatch(1);
+            client.newCall(request).enqueue(new Callback() {
+                @Override
+                public void onFailure(Call call, IOException e) {
+                    Log.d("연결 실패", "error Connect Server error is"+e.toString());
+                    e.printStackTrace();
+                    countDownLatch.countDown();
+                }
+
+                @Override
+                public void onResponse(Call call, Response response) throws IOException {
+                    result =response.body().string();
+                    Boolean b = result.equals("\n\n\n\n\nsuccess");
+                    Log.d("동선 삽입 진짜 같냐? ", b.toString());
+                    Log.d("삽입 젼쥬", result);
+                    countDownLatch.countDown();
+                }
+            });
+
+            countDownLatch.await();
+            Log.d("삽입 젼쥬22", result);
+            if(result.equals("\n\n\n\n\nsuccess")) return 1;
+            else return -1;
         }
 
         /*관리자의 확진자 수정 페이지에서 확진자 동선 정보 하나를 삭제하는 메소드 */
-        public static int delete_pmoving(Patient patient, VisitPlace visitplace) {
-            if (result.equals("success")) return 1;
-            else return 0;
+        public static int delete_pmoving(Patient patient, VisitPlace visitplace) throws InterruptedException {
+            String pnum=patient.getPatientNum();
+            String bloc=String.format("%02d",patient.getBigLocalNum());
+            String sloc=String.format("%02d",patient.getSmallLocalNum());
+            String plocnum=bloc+sloc;
+            String visitdate=visitplace.getVisitDate();
+            Double pointx=visitplace.getVisitPlace().get_placeX();
+            Double pointy=visitplace.getVisitPlace().get_placeY();
+
+
+            //pnum, plocnum, visitdate, Double.parseDouble(pointx), Double.parseDouble(pointy), address);
+            RequestBody body = new FormBody.Builder().add("pnum", pnum).add("plocnum", plocnum).add("visitdate", visitdate).add("pointx", String.valueOf(pointx)).add("pointy", String.valueOf(pointy)).add("type", "delete_pmoving").build();
+            Request request = new Request.Builder().url(OkhttpUrl).method("POST", body).build();
+
+            final CountDownLatch countDownLatch = new CountDownLatch(1);
+            client.newCall(request).enqueue(new Callback() {
+                @Override
+                public void onFailure(Call call, IOException e) {
+                    Log.d("연결 실패", "error Connect Server error is"+e.toString());
+                    e.printStackTrace();
+                    countDownLatch.countDown();
+                }
+
+                @Override
+                public void onResponse(Call call, Response response) throws IOException {
+                    result =response.body().string();
+                    Boolean b = result.equals("\n\n\n\n\nsuccess");
+                    Log.d("동선 삭제진짜 같냐? ", b.toString());
+                    Log.d("삭제 전쥬", result);
+                    countDownLatch.countDown();
+                }
+            });
+
+            countDownLatch.await();
+            Log.d("쥬삭제 젼쥬22", result);
+            if(result.equals("\n\n\n\n\nsuccess")) return 1;
+            else return -1;
         }
 
         /*관리자의 확진자 추가, 수정 페이지에서 확진자 동선 정보 하나를 삭제하는 메소드-환자 정보를 삭제하면 관련 동선 정보도 싹다 삭제*/
-        public static int delete_patient(Patient patient) {
-            if (result.equals("success")) return 1;
-            else return 0;
+        public static int delete_patient(Patient patient) throws InterruptedException {
+            String pnum=patient.getPatientNum();
+            String bloc=String.format("%02d",patient.getBigLocalNum());
+            String sloc=String.format("%02d",patient.getSmallLocalNum());
+            String plocnum=bloc+sloc;
+
+            RequestBody body = new FormBody.Builder().add("pnum", pnum).add("plocnum", plocnum).add("type", "delete_patient").build();
+            Request request = new Request.Builder().url(OkhttpUrl).method("POST", body).build();
+
+            final CountDownLatch countDownLatch = new CountDownLatch(1);
+            client.newCall(request).enqueue(new Callback() {
+                @Override
+                public void onFailure(Call call, IOException e) {
+                    Log.d("연결 실패", "error Connect Server error is"+e.toString());
+                    e.printStackTrace();
+                    countDownLatch.countDown();
+                }
+
+                @Override
+                public void onResponse(Call call, Response response) throws IOException {
+                    result =response.body().string();
+                    countDownLatch.countDown();
+                }
+            });
+
+            countDownLatch.await();
+            if(result.equals("\n\n\n\n\nsuccess")) return 1;
+            else if(result.equals("\n\n\n\n\nfail")) return 0;
+            else return -1;
         }
 
 
Index: app/src/main/java/com/example/project/PageOfAdd.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.project;\n\nimport android.graphics.Color;\nimport android.graphics.drawable.ColorDrawable;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.view.Window;\nimport android.view.WindowManager;\nimport android.widget.AdapterView;\nimport android.widget.ArrayAdapter;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.ImageButton;\nimport android.widget.Spinner;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport androidx.annotation.NonNull;\nimport androidx.annotation.Nullable;\nimport androidx.core.content.ContextCompat;\nimport androidx.fragment.app.Fragment;\nimport androidx.fragment.app.FragmentTransaction;\nimport androidx.recyclerview.widget.LinearLayoutManager;\nimport androidx.recyclerview.widget.RecyclerView;\n\nimport java.util.ArrayList;\n\npublic class PageOfAdd<STATE_DUPLE_FALSE> extends Fragment {\n\n    /*입력 받는 컴포넌트*/\n    //Spinner 관련 컴포넌트\n    private Spinner bigLocSpinner, smallLocSpinner;\n    private ArrayAdapter bigAdapter, smallAdapter;\n\n    private EditText patientNumEditText, patientDateEditText;\n    private Button dupleButton;\n\n    /*RecyclerView 관련 컴포넌트*/\n    private RecyclerView visitRecyclerView;\n    private LinearLayoutManager layoutManager;\n    //private ArrayList<Patient> patientArrayList;\n    AdapterOfPlace adapter;\n\n    /*다이얼로그 관련 컴포넌트*/\n    private ImageButton addPlaceButton;\n    private DialogOfPlace dialog;\n\n    /*UI 컴포넌트*/\n    private TextView dupleCheckTextView;\n\n    /*데이터 저장 변수*/\n    String pNum, pDate;\n    int pBigLocal, pSmallLocal;\n    ArrayList<VisitPlace> visitPlaces;\n    Boolean dupleCheck, saveCheck;\n    DBEntity dbEntity = new DBEntity();\n    Patient patient;\n\n    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState){\n        View v = inflater.inflate(R.layout.fragment_manager_add, container, false);\n\n        patientNumEditText = v.findViewById(R.id.patient_num_EditText);\n        patientDateEditText = v.findViewById(R.id.patient_date_EditText);\n        patientNumEditText.setText(null);\n        patientDateEditText.setText(null);\n\n        dupleCheck = false;\n        saveCheck = false;\n        dupleButton = v.findViewById(R.id.patient_duple_Button);\n        dupleCheckTextView = v.findViewById(R.id.duple_check_TextView);\n        DupleChecking();\n\n        /*Spinner 연결*/\n        bigLocSpinner = v.findViewById(R.id.add_big_Spinner);\n        smallLocSpinner = v.findViewById(R.id.add_small_Spinner);\n\n        SetSpinnerAdapter();\n        BigSpinnerAction();\n        SmallSpinnerAction();\n        //--------------------------------------------------------------------------------------\n\n        /*RecyclerView 연결*/\n        visitRecyclerView = v.findViewById(R.id.patient_visit_RecyclerView);\n        layoutManager = new LinearLayoutManager(getActivity());\n        visitRecyclerView.setLayoutManager(layoutManager);\n        visitRecyclerView.setHasFixedSize(true);\n\n        visitPlaces = new ArrayList<>();\n        adapter = new AdapterOfPlace(visitPlaces, 1);\n        visitRecyclerView.setAdapter(adapter);\n\n        adapter.setModifyClickListenter(new AdapterOfPlace.OnModifyClickListener() {\n            @Override\n            public void onModifyItemClick(View v, int pos) {\n                visitPlaces.remove(pos);\n                adapter.notifyDataSetChanged();\n            }\n        });\n        //--------------------------------------------------------------------------------------\n\n        /*다이얼로그 연결*/\n        addPlaceButton = v.findViewById(R.id.patient_visit_add_Button);\n        addPlaceButton.setVisibility(View.INVISIBLE);\n        addPlaceButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                if(dupleCheck == true){\n                    dialog = new DialogOfPlace(getContext());\n                    dialog.setVisitDialogListener(new DialogOfPlace.VisitDialogListener(){\n                        @Override\n                        public void onAddClicked(VisitPlace visitPlace) {\n                            visitPlaces.add(visitPlace);\n                            adapter.notifyDataSetChanged();\n                        }\n                    });\n                    dialog.setCancelable(true);\n                    dialog.setCanceledOnTouchOutside(false);\n                    dialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));\n                    dialog.show();\n                    WindowManager.LayoutParams lp = new WindowManager.LayoutParams();\n                    lp.copyFrom(dialog.getWindow().getAttributes());\n                    lp.width = WindowManager.LayoutParams.MATCH_PARENT;\n                    lp.height = WindowManager.LayoutParams.WRAP_CONTENT;\n                    Window window = dialog.getWindow();\n                    window.setAttributes(lp);\n\n                }\n                else{\n                    Toast.makeText(getContext(), \"중복 확인을 먼저 하고 동선을 추가하세요\", Toast.LENGTH_SHORT).show();\n                }\n            }\n        });\n\n        //--------------------------------------------------------------------------------------\n\n\n        return v;\n    }\n\n    private void DupleChecking(){\n        dupleButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                if(dupleCheck == false && saveCheck == false){  // 중복 확인 버튼 클릭 후\n                    if(patientNumEditText.getText() != null && patientDateEditText.getText() !=null){\n                        GetDataFromUI();\n                        int localNumber = pBigLocal*100+pSmallLocal;\n                        if(DBEntity.check_patient(localNumber, patientNumEditText.getText().toString())==1){\n                            dupleCheckTextView.setText(\"중복 확인! 아래에서 확진자 동선을 추가하세요\");\n                            dupleCheckTextView.setTextColor(ContextCompat.getColor(getContext(), R.color.colorGreen));\n                            dupleCheck = true;\n                            addPlaceButton.setVisibility(View.VISIBLE);\n                            dupleButton.setText(\"저    장\");\n                            dupleButton.setBackground(ContextCompat.getDrawable(getContext(), R.drawable.button_full_green));\n                        }\n                        else{\n                            Toast.makeText(getContext(), \"확진자 번호가 중복됩니다. 다시 입력해주세요\", Toast.LENGTH_SHORT).show();\n                        }\n\n                    }else{\n                        Toast.makeText(getContext(), \"확진자 기본 정보를 모두 입력하세요\", Toast.LENGTH_SHORT).show();\n                    }\n                }\n                else if(dupleCheck == true && saveCheck == false){  // 저장 버튼 클릭 후\n                    Log.d(\"현재 DB엔티티 더미데이터 크기 : \", Integer.toString(dbEntity.ListSize()));\n                    Patient addPatient = new Patient(pSmallLocal, pBigLocal, pNum, pDate, visitPlaces);\n                    dbEntity.AND_insert_patient(addPatient);\n                    Log.d(\"지금 추가 후 DB엔티티 더미데이터 크기 : \", Integer.toString(dbEntity.ListSize()));\n\n                    Toast.makeText(getContext(), \"확진자\"+pNum+\" 정보가 저장되었습니다.\", Toast.LENGTH_SHORT).show();\n                    dupleButton.setText(\"새 로 고 침\");\n                    addPlaceButton.setVisibility(View.INVISIBLE);\n                    dupleButton.setBackground(ContextCompat.getDrawable(getContext(), R.drawable.button_full_blue));\n                    dupleCheckTextView.setText(\"정보가 저장되었습니다. 새로고침하여 새 정보를 입력하세요.\");\n                    dupleCheckTextView.setTextColor(ContextCompat.getColor(getContext(), R.color.colorBlue));\n                    saveCheck = true;\n                }\n                else if(dupleCheck && saveCheck){\n                    Log.d(\"새로고침\", \"OK\");\n                    RefreshFragment();\n                }\n            }\n        });\n    }\n    void RefreshFragment(){\n        patientNumEditText.setText(null);\n        patientDateEditText.setText(null);\n        SetSpinnerAdapter();\n        FragmentTransaction ft = getFragmentManager().beginTransaction();\n        ft.detach(this).attach(this).commit();\n    }\n\n\n    private void GetDataFromUI(){\n        pNum = patientNumEditText.getText().toString();\n        pDate = patientDateEditText.getText().toString();\n        Log.d(\"잘 들어왔는가?\", pNum+\" , \"+pDate);\n        //String date = \"20\" + patientDateEditText.getText().toString();\n        //SimpleDateFormat dateFormat = new SimpleDateFormat(\"YYYYMMDD\");\n        //Date pdate = dateFormat.parse(date);\n\n    }\n\n\n    private void SetSpinnerAdapter(){\n        bigAdapter = ArrayAdapter.createFromResource(getContext(), R.array.big_location_array, android.R.layout.simple_spinner_dropdown_item);\n        bigAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\n        bigLocSpinner.setAdapter(bigAdapter);\n\n        smallAdapter = ArrayAdapter.createFromResource(getContext(), R.array.array_0, android.R.layout.simple_spinner_dropdown_item);\n        smallAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\n        smallLocSpinner.setAdapter(smallAdapter);\n    }\n\n    private void BigSpinnerAction(){\n        bigLocSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\n            @Override\n            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {\n                String index = Integer.toString(i);\n                int resId = getResources().getIdentifier(\"array_\"+index, \"array\", getContext().getPackageName());\n                smallAdapter = ArrayAdapter.createFromResource(getContext(), resId, android.R.layout.simple_spinner_dropdown_item);\n\n                pBigLocal = i;\n                Log.d(\"ADD 큰 도시 : \", Integer.toString(i));\n                smallAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\n                smallLocSpinner.setAdapter(smallAdapter);\n            }\n\n            @Override\n            public void onNothingSelected(AdapterView<?> adapterView) {\n                pBigLocal = 0;\n            }\n        });\n    }\n    private void SmallSpinnerAction(){\n        smallLocSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\n            @Override\n            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {\n                pSmallLocal = i;\n            }\n\n            @Override\n            public void onNothingSelected(AdapterView<?> adapterView) {\n                pSmallLocal = 0;\n            }\n        });\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/project/PageOfAdd.java	(revision 913aced32c34f88249939901266d986e0c3b69f6)
+++ app/src/main/java/com/example/project/PageOfAdd.java	(date 1606964186000)
@@ -165,10 +165,16 @@
                     }
                 }
                 else if(dupleCheck == true && saveCheck == false){  // 저장 버튼 클릭 후
-                    Log.d("현재 DB엔티티 더미데이터 크기 : ", Integer.toString(dbEntity.ListSize()));
+                    //Log.d("현재 DB엔티티 더미데이터 크기 : ", Integer.toString(dbEntity.ListSize()));
                     Patient addPatient = new Patient(pSmallLocal, pBigLocal, pNum, pDate, visitPlaces);
-                    dbEntity.AND_insert_patient(addPatient);
-                    Log.d("지금 추가 후 DB엔티티 더미데이터 크기 : ", Integer.toString(dbEntity.ListSize()));
+                    try {
+                        if(dbEntity.insert_patient(addPatient)==1){
+                            dbEntity.AND_insert_patient(addPatient);
+                        }
+                    } catch (InterruptedException e) {
+                        e.printStackTrace();
+                    }
+                   // Log.d("지금 추가 후 DB엔티티 더미데이터 크기 : ", Integer.toString(dbEntity.ListSize()));
 
                     Toast.makeText(getContext(), "확진자"+pNum+" 정보가 저장되었습니다.", Toast.LENGTH_SHORT).show();
                     dupleButton.setText("새 로 고 침");
Index: app/build/intermediates/incremental/packageDebug/tmp/debug/dex-renamer-state.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#Thu Dec 03 00:15:50 KST 2020\npath.2=classes_0.dex\npath.1=classes.dex\npath.0=classes.dex\nrenamed.2=classes3.dex\nrenamed.1=classes2.dex\nrenamed.0=classes.dex\nbase.2=/Users/soyoungpark/AndroidStudioProjects/WPL_android/app/build/intermediates/dex/debug/mergeLibDexDebug/classes_0.dex\nbase.1=/Users/soyoungpark/AndroidStudioProjects/WPL_android/app/build/intermediates/dex/debug/mergeProjectDexDebug/classes.dex\nbase.0=/Users/soyoungpark/AndroidStudioProjects/WPL_android/app/build/intermediates/dex/debug/mergeExtDexDebug/classes.dex\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build/intermediates/incremental/packageDebug/tmp/debug/dex-renamer-state.txt	(revision 913aced32c34f88249939901266d986e0c3b69f6)
+++ app/build/intermediates/incremental/packageDebug/tmp/debug/dex-renamer-state.txt	(date 1606943195000)
@@ -1,4 +1,4 @@
-#Thu Dec 03 00:15:50 KST 2020
+#Thu Dec 03 06:06:35 KST 2020
 path.2=classes_0.dex
 path.1=classes.dex
 path.0=classes.dex
Index: app/src/main/java/com/example/project/PageOfToManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.project;\n\nimport androidx.appcompat.app.ActionBar;\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.appcompat.widget.Toolbar;\n\nimport android.app.Dialog;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.View;\nimport android.view.Window;\nimport android.view.WindowManager;\nimport android.widget.Button;\nimport android.widget.ImageButton;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport com.google.android.material.textfield.TextInputEditText;\n\nimport java.io.IOException;\n\nimport okhttp3.Call;\nimport okhttp3.Callback;\nimport okhttp3.FormBody;\nimport okhttp3.MediaType;\nimport okhttp3.OkHttpClient;\nimport okhttp3.Request;\nimport okhttp3.RequestBody;\nimport okhttp3.Response;\n\nimport static android.widget.Toast.LENGTH_SHORT;\n\npublic class PageOfToManager extends AppCompatActivity {\n\n    private OkHttpClient client;\n    private String OkhttpUrl;\n    private Request request;\n    private MediaType mediaType;\n    private RequestBody body;\n    static String result=\"s\";\n\n    /*Tool Bar 관련 컴포넌트*/\n    private Toolbar toolbar;\n    private ActionBar actionBar;\n    private TextView TitleTextView;\n\n    /*관리자 로그인 관련 컴포넌트*/\n    Button toManagerButton;\n    Dialog loginDialog;\n    private TextInputEditText managerIDEditText, managerPWEditText;\n    private Button loginButton;\n    private ImageButton dismissButton;\n    private String managerID, managerPW;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_to_manager);\n\n        /*Tool Bar 연결*/\n        toolbar = findViewById(R.id.toManager_Toolbar);\n        setSupportActionBar(toolbar);\n        actionBar = getSupportActionBar();\n        actionBar.setDisplayShowCustomEnabled(true);\n        actionBar.setDisplayShowTitleEnabled(false);\n\n        TitleTextView = findViewById(R.id.toManager_Title_TextView);\n        TitleTextView.setText(\"사용자 어플리케이션 정보\");\n        //----------------------------------------------------------------------\n\n        /*관리자 로그인 다이얼로그 연결*/\n        loginDialog = new Dialog(PageOfToManager.this);\n        loginDialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\n        loginDialog.setContentView(R.layout.dialog_manager_login);\n\n        managerIDEditText = loginDialog.findViewById(R.id.manager_login_id_EditText);\n        managerPWEditText = loginDialog.findViewById(R.id.manager_login_pw_EditText);\n        loginButton = loginDialog.findViewById(R.id.manager_login_Button);\n        dismissButton = loginDialog.findViewById(R.id.manager_login_dismiss_Button);\n        //----------------------------------------------------------------------\n\n        /*다이얼로그 버튼 연결*/\n        toManagerButton = findViewById(R.id.switch_to_manager_Button);\n        toManagerButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                makeDialogAction();\n            }\n        });\n        //----------------------------------------------------------------------\n        client = new OkHttpClient().newBuilder().build();\n        mediaType = MediaType.parse(\"text/plain\");\n        OkhttpUrl=\"http://192.168.1.196:8080/WLP_re/androidDB.jsp\";\n        //----------------------------------------------------------------------\n    }\n\n    /* 다이얼로그 기능 구현 메소드 */\n    private void makeDialogAction() {\n        loginDialog.show();\n        WindowManager.LayoutParams lp = new WindowManager.LayoutParams();\n        lp.copyFrom(loginDialog.getWindow().getAttributes());\n        lp.width = WindowManager.LayoutParams.MATCH_PARENT;\n        lp.height = WindowManager.LayoutParams.WRAP_CONTENT;\n        Window window = loginDialog.getWindow();\n        window.setAttributes(lp);\n\n        loginButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n\n                managerID = managerIDEditText.getText().toString();\n                managerPW = managerPWEditText.getText().toString();\n                int result= 0;\n                try {\n                    result = DBEntity.login(managerID,managerPW);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n\n\n                // Log.d(\"response jsp db\",response.body().string()+\"\");\n                            if (result==1) {\n                                Toast.makeText(PageOfToManager.this, \"로그인\", LENGTH_SHORT).show();\n                                //Log.d(\"로그인\", result);\n                                Intent intent = new Intent(getApplicationContext(), ManagerPages.class);\n                                intent.putExtra(\"managerID\", managerID);\n                                intent.putExtra(\"managerPW\", managerPW);\n                                startActivity(intent);\n                                finish();\n                            } else if (result==0) {\n                                //Log.d(\"아이디/비번이 틀디\", result);\n                                Toast.makeText(PageOfToManager.this, \"아이디 또는 비밀번호가 틀렸음\", LENGTH_SHORT).show();\n                                managerIDEditText.setText(\"\");\n                                managerPWEditText.setText(\"\");\n                            } else if (result==2) {\n                               // Log.d(\"존재하지 않는 아이디\", result);\n                                Toast.makeText(PageOfToManager.this, \"존재하지 않는 아이디\", LENGTH_SHORT).show();\n                                managerIDEditText.setText(\"\");\n                                managerPWEditText.setText(\"\");\n                            }else{\n                              //  Log.d(\"서버 오류\", result);\n                                Toast.makeText(PageOfToManager.this, \"서버 오류\", LENGTH_SHORT).show();\n                                managerIDEditText.setText(\"\");\n                                managerPWEditText.setText(\"\");\n                            }\n                            loginDialog.dismiss();\n\n            }\n        });\n\n        dismissButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                loginDialog.dismiss();\n            }\n        });\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/project/PageOfToManager.java	(revision 913aced32c34f88249939901266d986e0c3b69f6)
+++ app/src/main/java/com/example/project/PageOfToManager.java	(date 1606923396000)
@@ -112,40 +112,32 @@
                 managerID = managerIDEditText.getText().toString();
                 managerPW = managerPWEditText.getText().toString();
                 int result= 0;
-                try {
-                    result = DBEntity.login(managerID,managerPW);
+                try { result = DBEntity.login(managerID,managerPW);
                 } catch (InterruptedException e) {
                     e.printStackTrace();
                 }
-
-
-                // Log.d("response jsp db",response.body().string()+"");
                             if (result==1) {
                                 Toast.makeText(PageOfToManager.this, "로그인", LENGTH_SHORT).show();
-                                //Log.d("로그인", result);
+
                                 Intent intent = new Intent(getApplicationContext(), ManagerPages.class);
                                 intent.putExtra("managerID", managerID);
                                 intent.putExtra("managerPW", managerPW);
                                 startActivity(intent);
                                 finish();
                             } else if (result==0) {
-                                //Log.d("아이디/비번이 틀디", result);
                                 Toast.makeText(PageOfToManager.this, "아이디 또는 비밀번호가 틀렸음", LENGTH_SHORT).show();
                                 managerIDEditText.setText("");
                                 managerPWEditText.setText("");
                             } else if (result==2) {
-                               // Log.d("존재하지 않는 아이디", result);
                                 Toast.makeText(PageOfToManager.this, "존재하지 않는 아이디", LENGTH_SHORT).show();
                                 managerIDEditText.setText("");
                                 managerPWEditText.setText("");
                             }else{
-                              //  Log.d("서버 오류", result);
                                 Toast.makeText(PageOfToManager.this, "서버 오류", LENGTH_SHORT).show();
                                 managerIDEditText.setText("");
                                 managerPWEditText.setText("");
                             }
                             loginDialog.dismiss();
-
             }
         });
 
